generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CurriculumType {
  CAPS
  IEB
}

enum SolutionType {
  STRUCTURED
  ESSAY
  MCQ
  DRAWING
  PROOF
  HEADER
}

enum ResourceType {
  TEXTBOOK
  PAST_PAPER
  STUDY_GUIDE
}

enum QuestionStatus {
  DRAFT
  LIVE
}

enum ResourceStatus {
  DRAFT
  LIVE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  TRIAL
}

// Simplified content types
enum ContentType {
  CHAPTER
  SECTION
  PAGE
  EXERCISE
}

model Profile {
  id        String     @id @db.Uuid
  role      UserRole   @default(STUDENT)
  grade     Int?
  school    String?
  subjects  String[]
  solutions Solution[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  paystackCustomerId String?
  subscriptionCode   String?
  encryptedToken   String?
  subscriptionStatus SubscriptionStatus?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean             @default(false)
  trialEndsAt        DateTime?
  solutionCredits    Int                 @default(3)

  @@map("profile")
}

model Resource {
  id         String         @id @default(uuid()) @db.Uuid
  type       ResourceType
  title      String
  subject    String
  grade      Int
  year       Int?
  term       Int?
  publisher  String?
  edition    String?
  coverImage String?
  curriculum CurriculumType
  status     ResourceStatus @default(DRAFT)
  
  // Content hierarchy
  contents   Content[]
  
  questions  Question[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// Simplified hierarchical content model
model Content {
  id            String      @id @default(uuid()) @db.Uuid
  resource      Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId    String      @db.Uuid
  
  // Content type and metadata
  type          ContentType
  title         String      // For Page type, this could be "Quick Check", "Review Exercises", etc.
  number        String?     // Could be "1", "1.1", "4a", etc.
  description   String?     // Additional context if needed
  pageNumber    Int?        // For physical page reference
  
  // Hierarchical relationships
  parentId      String?     @db.Uuid
  parent        Content?    @relation("ContentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Content[]   @relation("ContentHierarchy")
  
  // Order within parent
  order         Int         @default(0)
  
  // Associated questions
  questions     Question[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([resourceId, type])
  @@index([parentId])
}

model Question {
  id             String         @id @default(uuid()) @db.Uuid
  resource       Resource       @relation(fields: [resourceId], references: [id])
  resourceId     String         @db.Uuid
  content        Content?       @relation(fields: [contentId], references: [id])
  contentId      String?        @db.Uuid
  questionNumber String
  exerciseNumber Int?
  type           SolutionType
  questionContent Json
  status         QuestionStatus @default(DRAFT)
  order          Int            @default(0)  // Added order field
  solutions      Solution[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Solution {
  id         String   @id @default(uuid()) @db.Uuid
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.Uuid
  admin      Profile  @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId    String   @db.Uuid
  content    Json
  steps      Json[]
  metrics    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}