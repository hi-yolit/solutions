generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CurriculumType {
  CAPS
  IEB
}

enum SolutionType {
  STRUCTURED
  ESSAY
  MCQ
  DRAWING
  PROOF
  HEADER
}

enum ResourceType {
  TEXTBOOK
  PAST_PAPER
  STUDY_GUIDE
}

enum QuestionStatus {
  DRAFT
  LIVE
}

enum ResourceStatus {
  DRAFT
  LIVE
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  fullName   String
  role       UserRole
  grade      Int?      // For students
  school     String?   // For students
  subjects   String[]  // For subjects they're interested in
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  solutions  Solution[]
}

model Resource {
  id          String         @id @default(cuid())
  type        ResourceType
  title       String      
  subject     String
  grade       Int
  year        Int?        
  term        Int?        
  publisher   String?     
  edition     String?
  coverImage  String?  
  curriculum  CurriculumType
  status      ResourceStatus @default(DRAFT)
  chapters    Chapter[]
  questions   Question[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Chapter {
  id          String    @id @default(cuid())
  resource    Resource  @relation(fields: [resourceId], references: [id])
  resourceId  String
  number      Int?
  title       String?
  topics      Topic[]
  questions   Question[]
}

model Topic {
  id          String    @id @default(cuid())
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  chapterId   String
  number      String?
  title       String?
  questions   Question[]
}

model Question {
  id              String       @id @default(cuid())
  resource        Resource     @relation(fields: [resourceId], references: [id])
  resourceId      String
  chapter         Chapter?     @relation(fields: [chapterId], references: [id])
  chapterId       String?
  topic           Topic?       @relation(fields: [topicId], references: [id])
  topicId         String?
  pageNumber      Int?
  questionNumber  String
  exerciseNumber  Int?
  type            SolutionType
  content         Json
  status          QuestionStatus @default(DRAFT)
  solutions       Solution[]
}

model Solution {
  id                String            @id @default(cuid())
  question          Question          @relation(fields: [questionId], references: [id])
  questionId        String
  admin             User              @relation(fields: [adminId], references: [id])
  adminId           String
  content           Json
  steps             Json[]
  metrics           Json
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}