generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum CurriculumType {
  CAPS
  IEB
}

enum SolutionType {
  STRUCTURED
  ESSAY
  MCQ
  DRAWING
  PROOF
  HEADER
}

enum ResourceType {
  TEXTBOOK
  PAST_PAPER
  STUDY_GUIDE
}

enum QuestionStatus {
  DRAFT
  LIVE
}

enum ResourceStatus {
  DRAFT
  LIVE
}

model Profile {
  id        String     @id @db.Uuid
  role      UserRole   @default(STUDENT)
  grade     Int?
  school    String?
  subjects  String[]
  solutions Solution[]
  createdAt DateTime   @default(now())

  @@map("profile")
}

model Resource {
  id         String         @id @default(uuid()) @db.Uuid
  type       ResourceType
  title      String
  subject    String
  grade      Int
  year       Int?
  term       Int?
  publisher  String?
  edition    String?
  coverImage String?
  curriculum CurriculumType
  status     ResourceStatus @default(DRAFT)
  chapters   Chapter[]
  questions  Question[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Chapter {
  id         String     @id @default(uuid()) @db.Uuid
  resource   Resource   @relation(fields: [resourceId], references: [id])
  resourceId String     @db.Uuid
  number     Int?
  title      String?
  topics     Topic[]
  questions  Question[]
}

model Topic {
  id        String     @id @default(uuid()) @db.Uuid
  chapter   Chapter    @relation(fields: [chapterId], references: [id])
  chapterId String     @db.Uuid
  number    String?
  title     String?
  questions Question[]
}

model Question {
  id             String         @id @default(uuid()) @db.Uuid
  resource       Resource       @relation(fields: [resourceId], references: [id])
  resourceId     String         @db.Uuid
  chapter        Chapter?       @relation(fields: [chapterId], references: [id])
  chapterId      String?        @db.Uuid
  topic          Topic?         @relation(fields: [topicId], references: [id])
  topicId        String?        @db.Uuid
  pageNumber     Int?
  questionNumber String
  exerciseNumber Int?
  type           SolutionType
  content        Json
  status         QuestionStatus @default(DRAFT)
  solutions      Solution[]
}

model Solution {
  id         String   @id @default(uuid()) @db.Uuid
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.Uuid
  admin      Profile  @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId    String   @db.Uuid
  content    Json
  steps      Json[]
  metrics    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
